t_main : main
s_lbrace : {
t_integer : integer
t_id : x
s_assign : =
t_number : 10
s_semi : ;
t_integer : integer
t_id : y
s_assign : =
t_number : 20
s_semi : ;
t_string : string
t_id : msg
s_assign : =
t_text : Hello, World!
s_semi : ;
t_if : if
s_lparen : (
t_id : x
s_lt : <
t_id : y
s_rparen : )
s_lbrace : {
t_output : output
t_text : x is less than y
s_semi : ;
s_rbrace : }
t_else : else
s_lbrace : {
t_output : output
t_text : x is greater than or equal to y
s_semi : ;
s_rbrace : }
t_while : while
s_lparen : (
t_id : x
s_lt : <
s_assign : =
t_id : y
s_rparen : )
s_lbrace : {
t_id : x
s_assign : =
t_id : x
s_plus : +
t_number : 1
s_semi : ;
s_rbrace : }
t_if : if
s_lparen : (
t_true : true
t_and : and
t_false : false
t_or : or
t_not : not
t_false : false
s_rparen : )
s_lbrace : {
t_output : output
t_text : Boolean logic works!
s_semi : ;
s_rbrace : }
t_integer : integer
t_id : sum
s_assign : =
t_id : x
s_plus : +
t_id : y
s_semi : ;
t_integer : integer
t_id : diff
s_assign : =
t_id : x
s_minus : -
t_id : y
s_semi : ;
t_integer : integer
t_id : product
s_assign : =
t_id : x
s_mult : *
t_id : y
s_semi : ;
t_if : if
s_lparen : (
t_id : x
s_gt : >
t_id : y
s_rparen : )
s_lbrace : {
t_output : output
t_text : x is greater
s_semi : ;
s_rbrace : }
t_else : else
t_if : if
s_lparen : (
t_id : x
s_assign : =
s_assign : =
t_id : y
s_rparen : )
s_lbrace : {
t_output : output
t_text : x is equal to y
s_semi : ;
s_rbrace : }
t_else : else
s_lbrace : {
t_output : output
t_text : x is smaller
s_semi : ;
s_rbrace : }
t_string : string
t_id : userInput
s_assign : =
t_input : input
s_semi : ;
s_rbrace : }
t_id : m59_p6
s_assign : =
t_number : 9
t_main : main
s_semi : ;
s_assign : =
s_assign : =
s_plus : +
s_plus : +
s_mult : *
t_number : 3
t_main : main
t_id : ad_fj
s_assign : =
t_number : 9
t_id : _fhf
s_minus : -
t_number : 1
s_semi : ;
